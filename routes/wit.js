/*
 Copyright (c) 2016 Ariba, Inc.
 All rights reserved. Patents pending.

 Responsible: i854911 (Harish Kumar)
 */

const HttpsProxyAgent = require('https-proxy-agent');

module.exports = function (options) {

    if (!options || !options.accessToken) {
        throw new Error('No wit.ai Access Token specified');
    }

    options.minConfidence = options.minConfidence || 0.5;

    const headers  = {
        'Authorization': 'Bearer ' + options.accessToken,
        'Accept': 'application/vnd.wit.' + options.apiVersion + '+json',
        'Content-Type': 'application/json'
    };

    var agent = null;
    var proxyUrl = process.env.https_proxy || process.env.HTTPS_PROXY || process.env.http_proxy || process.env.HTTP_PROXY;
    if (proxyUrl) {
        agent = new HttpsProxyAgent(proxyUrl);
    }

    const middleware = {};

    middleware.receive = function (bot, message, next) {

        console.log("****MIDDLEWARE RECEIVE****");
        console.log(message);

        //Avoid text payload generated by buttons in Facebook Messenger
        if (message.text && !message.payload && !message.attachments && !message.quick_reply) {
            var Client = require('node-rest-client').Client;

            var client = new Client({
                connection: {
                    agent: agent
                }
            });

            var args = {
                headers: headers
            };

            var msg = message.text.substr(message.text.indexOf(">") + 1, message.text.length);

            var qs = 'q=' + encodeURIComponent(msg);

            console.log("Message: " + msg);

            var fullURL = "https://api.wit.ai" + '/message?' + qs;

            client.get(fullURL, args, function (data, response) {
                // parsed response body as js object
                console.log('Wit.ai response: ' + JSON.stringify(data));
                message.entities = data.entities;
                next();
                // raw response
                // console.log(response);
            }).on('error', function (err)   {
                console.log(err);
                next(err);
            });
        } else {
            message.entities = {};
            next();
        }
    };

    middleware.hears = function (patterns, message) {
        if (patterns && message && message.entities && Object.keys(message.entities).length) {
            for (var i = 0; i < Object.keys(message.entities).length; i++) {
                for (var t = 0; t < patterns.length; t++) {
                    if (Object.keys(message.entities)[i] == patterns[t]){
                        for (var j = 0; j < message.entities[Object.keys(message.entities)[i]].length; j++){
                            if (message.entities[Object.keys(message.entities)[i]][j].confidence >= options.minConfidence){
                                return true;
                            }
                        }
                    }
                }
            }
        }

        return false;
    };

    return middleware;
};

// const fetch = require('node-fetch');
// const HttpsProxyAgent = require('https-proxy-agent');
//
// module.exports = function (options) {
//
//     if (!options || !options.accessToken) {
//         throw new Error('No wit.ai Access Token specified');
//     }
//
//     options.minConfidence = options.minConfidence || 0.5;
//
//     const headers  = {
//         'Authorization': 'Bearer ' + options.accessToken,
//         'Accept': 'application/vnd.wit.' + options.apiVersion + '+json',
//         'Content-Type': 'application/json'
//     };
//
//     var agent = null;
//     var proxyUrl = process.env.https_proxy || process.env.HTTPS_PROXY || process.env.http_proxy || process.env.HTTP_PROXY;
//     if (proxyUrl) {
//         agent = new HttpsProxyAgent(proxyUrl);
//     }
//
//     const middleware = {};
//
//     var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
//
//     var makeWitResponseHandler = function makeWitResponseHandler(endpoint) {
//         return function (rsp) {
//             var error = function error(err) {
//                 console.log('[' + endpoint + '] Error: ' + err);
//                 throw err;
//             };
//
//             if (rsp instanceof Error) {
//                 return error(rsp);
//             }
//
//             var _rsp = _slicedToArray(rsp, 2),
//                 json = _rsp[0],
//                 status = _rsp[1];
//
//             if (json instanceof Error) {
//                 return error(json);
//             }
//
//             var err = json.error || status !== 200 && json.body + ' (' + status + ')';
//
//             if (err) {
//                 return error(err);
//             }
//
//             console.log('[' + endpoint + '] Response: ' + JSON.stringify(json));
//             return json;
//         };
//     };
//
//     var makeAPICall = function(message, context) {
//         var qs = 'q=' + encodeURIComponent(message);
//         if (context) {
//             qs += '&context=' + encodeURIComponent(JSON.stringify(context));
//         }
//         var method = 'GET';
//         var fullURL = "https://api.wit.ai" + '/message?' + qs;
//         var handler = makeWitResponseHandler('message');
//         return fetch(fullURL, {
//             method: method,
//             headers: headers,
//             agent: agent
//         }).then(function (response) {
//             return Promise.all([response.json(), response.status]);
//         }).then(handler);
//     };
//
//     middleware.receive = function (bot, message, next) {
//
//         //Avoid text payload generated by buttons in Facebook Messenger
//         if (message.text && message.text.indexOf("_") == -1 && !message.payload && !message.attachments && !message.quick_reply) {
//             makeAPICall(message.text)
//                 .then((data) => {
//                     console.log('Wit.ai response: ' + JSON.stringify(data));
//                     message.entities = data.entities;
//                     next();
//                 })
//                 .catch((err) => {
//                     console.log(err);
//                     next(err);
//                 });
//         } else {
//             message.entities = {};
//             next();
//         }
//     };
//
//     middleware.hears = function (patterns, message) {
//         if (patterns && message && message.entities && Object.keys(message.entities).length) {
//             for (var i = 0; i < Object.keys(message.entities).length; i++) {
//                 for (var t = 0; t < patterns.length; t++) {
//                     if (Object.keys(message.entities)[i] == patterns[t]){
//                         for (var j = 0; j < message.entities[Object.keys(message.entities)[i]].length; j++){
//                             if (message.entities[Object.keys(message.entities)[i]][j].confidence >= options.minConfidence){
//                                 return true;
//                             }
//                         }
//                     }
//                 }
//             }
//         }
//
//         return false;
//     };
//
//     return middleware;
// };

